planeMesh =
  [ (V3 (-10) (-10) 0, V3 0 0 1)
  , (V3 10 (-10) 0, V3 0 0 1)
  , (V3 10 10 0, V3 0 0 1)
  , (V3 10 10 0, V3 0 0 1)
  , (V3 (-10) 10 0, V3 0 0 1)
  , (V3 (-10) (-10) 0, V3 0 0 1)
  ]

{-
lambdaCubeMesh =
  [ (V3 5.000 (-5.000) 0.210, V3 0.000 0.000 1.000)
  , (V3 5.000 (-4.000) 0.210, V3 0.000 0.000 1.000)
  , (V3 (-5.000) (-4.000) 0.210, V3 0.000 0.000 1.000)
  ...
  ]
-}

-- Values needed to transform an object local coordinate into UVW for field lookup
fieldScale = V3 0.08695652 0.071704365 0.07692308
fieldOffset = V3 0 (-0.017949104) (-1.5)
fieldZDim = 32.0
fieldZDimInv = 1 / fieldZDim

tr x y z = M44F r1 r2 r3 r4
  where
    r1 = V4 1 0 0 0
    r2 = V4 0 1 0 0
    r3 = V4 0 0 1 0
    r4 = V4 x y z 1
        
sc s = M44F r1 r2 r3 r4
  where
    r1 = V4 s 0 0 0
    r2 = V4 0 s 0 0
    r3 = V4 0 0 s 0
    r4 = V4 0 0 0 1
    
makeFrame (time :: Float)
          (casterStream :: PrimitiveStream Triangle (Vec 3 Float, Vec 3 Float))
          (planeStream :: PrimitiveStream Triangle (Vec 3 Float, Vec 3 Float))

    =         imageFrame (emptyDepthImage 1, emptyColorImage navy)
    `overlay` accumulablefragments casterTrans casterStream
    `overlay` accumulablefragments backTrans planeStream
    `overlay` accumulablefragments leftTrans planeStream
    `overlay` accumulablefragments rightTrans planeStream
    `overlay` accumulablefragments bottomTrans planeStream
  where
    rotX = pi / 24.0 * time
    rotY = pi / 4.0 * time
    eyeX = sin (pi / 17.0 * time) * 5
  
    casterTrans = rotationEuler rotY rotX 0
    --casterInvTrans = inv casterTrans -- inverse doesn't work?
    casterInvTrans = transpose casterTrans
    
    backTrans = sc 0.9 .*. tr 0 0 (-10) .*. rotMatrixY pi
    leftTrans = sc 0.9 .*. tr (-10) 0 0 .*. rotMatrixY (pi / 2)
    rightTrans = sc 0.9 .*. tr 10 0 0 .*. rotMatrixY (-pi / 2)
    bottomTrans = sc 0.9 .*. tr 0 (-10) 0 .*. rotMatrixX (-pi / 2)
    
    viewProjection = perspective 0.1 100.0 (30 * pi / 180) 1.0 .*. lookat (V3 eyeX 8 25) (V3 0 (-2) 0) (V3 0 1 0)
    
    minSampler = Sampler LinearFilter ClampToEdge (Texture2DSlot "OcclusionFieldMin")
    maxSampler = Sampler LinearFilter ClampToEdge (Texture2DSlot "OcclusionFieldMax")

    accumulablefragments modelTrans vertexStream
        = vertexStream
        & mapPrimitives (vert modelTrans)
        & rasterizePrimitives (TriangleCtx CullNone PolygonFill NoOffset LastVertex) (Smooth, Smooth)
        & mapFragments frag
        & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

    vert modelTrans (pos, normal) =
        (scale 0.5 (viewProjection *. modelTrans *. pos'), normal', uvw')
      where
        pos' = V4 pos%x pos%y pos%z 1
        normal' = normalize (casterInvTrans *. modelTrans *. V4 normal%x normal%y normal%z 0)%xyz
        uvw = ((casterInvTrans *. modelTrans *. pos')%xyz - fieldOffset) * fieldScale
        uvw' = uvw *! 0.5 +! 0.5 + normal' *! fieldZDimInv

    frag (normal, uvw) = ((V4 shade shade shade 1))
      where
        light = (normal%x + normal%y) * 0.1 + 0.9
        uvw' = min (max uvw zero) one
        u = uvw'%x
        v = uvw'%y * fieldZDimInv
        w = uvw'%z * fieldZDim - 0.5
        index = floor w
        uv1 = V2 u (v + index * fieldZDimInv)
        uv2 = V2 u (v + (index + 1) * fieldZDimInv)
        minSmp = mixS (texture2D minSampler uv1) (texture2D minSampler uv2) (fract w)
        maxSmp = mixS (texture2D maxSampler uv1) (texture2D maxSampler uv2) (fract w)
        minNormal = max (normal *! (-1)) zero
        maxNormal = max normal zero
        occlusion = dot minSmp%xyz minNormal + dot maxSmp%xyz maxNormal
        shade = (1 - occlusion * 0.5) * light

lambdaCubeStream = fetch "lambdaCube" (Attribute "position" :: Vec 3 Float, Attribute "normal" :: Vec 3 Float)

main = renderFrame $
    makeFrame (Uniform "Time") lambdaCubeStream (makeStream planeMesh)
  where
    makeStream mesh = fetchArrays (unzip mesh)