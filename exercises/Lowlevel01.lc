-- constants
dark = V4F 0.1 0.0 0.2 1

blend = Blend   (FuncAdd,FuncAdd) 
                ((SrcAlpha,OneMinusSrcAlpha),(SrcAlpha,OneMinusSrcAlpha)) 
                (V4F 1.0 1.0 1.0 1.0)
blend' = NoBlending
cull = CullNone
cull' = CullFront CW
-- uniforms aka constants from user
modelViewProj = Uni (IM44F "MVP")
-- empty framebuffer including depth and color component
clear = FrameBuffer (DepthImage @1 1000, ColorImage @1 dark)
-- rendering contexts for rasterization and fragment operations
rasterCtx = TriangleCtx cull PolygonFill NoOffset LastVertex
fragmentCtx = AccumulationContext
                ( DepthOp Less False -- depth function and depth mask
                , ColorOp blend (V4B True True True True)
                )
-- shader functions
vertexShader (v,n) =
    let v2 = PrimV3FToV4F v
        n2 = PrimV3FToV4F n
        projected = PrimMulMatVec modelViewProj v2
    in VertexOut projected 1.0 () (Smooth n2,Smooth v2)

fragmentShader (v,a) =
    let c = PrimMul v (V4F 1.0 1.4 1.0 0.6)
    in FragmentOutRastDepth c

-- streams: buffer --> vertex transform --> fragment transform --> image
vertexStream = Fetch "stream" Triangles (IV3F "position",IV3F "normal")
primitiveStream = Transform vertexShader vertexStream
fragmentStream = Rasterize rasterCtx primitiveStream
frame = Accumulate fragmentCtx PassAll fragmentShader fragmentStream clear

main = ScreenOut frame -- screen output
